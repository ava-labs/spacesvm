// Copyright (C) 2019-2021, Ava Labs, Inc. All rights reserved.
// See the file LICENSE for licensing terms.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ava-labs/quarkvm/chain (interfaces: UnsignedTransaction)

package chain

import (
	reflect "reflect"

	database "github.com/ava-labs/avalanchego/database"
	ids "github.com/ava-labs/avalanchego/ids"
	gomock "github.com/golang/mock/gomock"
)

// MockUnsignedTransaction is a mock of UnsignedTransaction interface.
type MockUnsignedTransaction struct {
	ctrl     *gomock.Controller
	recorder *MockUnsignedTransactionMockRecorder
}

// MockUnsignedTransactionMockRecorder is the mock recorder for MockUnsignedTransaction.
type MockUnsignedTransactionMockRecorder struct {
	mock *MockUnsignedTransaction
}

// NewMockUnsignedTransaction creates a new mock instance.
func NewMockUnsignedTransaction(ctrl *gomock.Controller) *MockUnsignedTransaction {
	mock := &MockUnsignedTransaction{ctrl: ctrl}
	mock.recorder = &MockUnsignedTransactionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsignedTransaction) EXPECT() *MockUnsignedTransactionMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockUnsignedTransaction) Execute(arg0 database.Database, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockUnsignedTransactionMockRecorder) Execute(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockUnsignedTransaction)(nil).Execute), arg0, arg1)
}

// ExecuteBase mocks base method.
func (m *MockUnsignedTransaction) ExecuteBase() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteBase")
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteBase indicates an expected call of ExecuteBase.
func (mr *MockUnsignedTransactionMockRecorder) ExecuteBase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteBase", reflect.TypeOf((*MockUnsignedTransaction)(nil).ExecuteBase))
}

// GetBlockID mocks base method.
func (m *MockUnsignedTransaction) GetBlockID() ids.ID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockID")
	ret0, _ := ret[0].(ids.ID)
	return ret0
}

// GetBlockID indicates an expected call of GetBlockID.
func (mr *MockUnsignedTransactionMockRecorder) GetBlockID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockID", reflect.TypeOf((*MockUnsignedTransaction)(nil).GetBlockID))
}

// GetExpiry mocks base method.
func (m *MockUnsignedTransaction) GetExpiry() (uint64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExpiry")
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetExpiry indicates an expected call of GetExpiry.
func (mr *MockUnsignedTransactionMockRecorder) GetExpiry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExpiry", reflect.TypeOf((*MockUnsignedTransaction)(nil).GetExpiry))
}

// GetSender mocks base method.
func (m *MockUnsignedTransaction) GetSender() [33]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSender")
	ret0, _ := ret[0].([33]byte)
	return ret0
}

// GetSender indicates an expected call of GetSender.
func (mr *MockUnsignedTransactionMockRecorder) GetSender() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSender", reflect.TypeOf((*MockUnsignedTransaction)(nil).GetSender))
}

// SetBlockID mocks base method.
func (m *MockUnsignedTransaction) SetBlockID(arg0 ids.ID) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetBlockID", arg0)
}

// SetBlockID indicates an expected call of SetBlockID.
func (mr *MockUnsignedTransactionMockRecorder) SetBlockID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetBlockID", reflect.TypeOf((*MockUnsignedTransaction)(nil).SetBlockID), arg0)
}

// SetGraffiti mocks base method.
func (m *MockUnsignedTransaction) SetGraffiti(arg0 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetGraffiti", arg0)
}

// SetGraffiti indicates an expected call of SetGraffiti.
func (mr *MockUnsignedTransactionMockRecorder) SetGraffiti(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGraffiti", reflect.TypeOf((*MockUnsignedTransaction)(nil).SetGraffiti), arg0)
}
